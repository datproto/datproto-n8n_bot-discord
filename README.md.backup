# Discord to n8n Message Forwarder Bot

> A powerful Discord bot that seamlessly integrates with n8n workflows. Automatically forwards Discord messages to n8n webhooks with detailed content type detection, perfect for automation and workflow triggers.

[![Discord](https://img.shields.io/badge/Discord-7289DA?style=for-the-badge&logo=discord&logoColor=white)](https://discord.com)
[![n8n](https://img.shields.io/badge/n8n-00E833?style=for-the-badge&logo=n8n&logoColor=white)](https://n8n.io)
[![Node.js](https://img.shields.io/badge/Node.js-339933?style=for-the-badge&logo=node.js&logoColor=white)](https://nodejs.org)
[![Railway](https://img.shields.io/badge/Railway-0B0D0E?style=for-the-badge&logo=railway&logoColor=white)](https://railway.app)

## 🔍 Overview

This Discord bot is designed to bridge Discord and n8n, enabling powerful automation workflows. It listens for messages in Discord channels and forwards them to n8n webhooks with detailed content analysis, making it perfect for:

- Discord message triggers for n8n workflows
- Automated content moderation
- Message archiving and logging
- Custom Discord integrations
- Workflow automation based on Discord activity

## 🚀 Key Features

- **Smart Content Detection**: Automatically identifies message types (text, stickers, images, videos, etc.)
- **Rich Message Data**: Forwards comprehensive message information to n8n
- **Easy Integration**: Simple setup with environment variables
- **Secure**: Built-in security features and proper error handling
- **Reliable**: Graceful shutdown and error recovery
- **Easy Deployment**: One-click deployment to Railway

## 📋 Table of Contents

- [Setup](#setup)
- [Features](#features)
- [Security](#security)
- [Required Permissions](#required-discord-bot-permissions)
- [Webhook Format](#n8n-webhook-format)
- [Content Types](#content-types)
- [Deployment](#deployment)
- [Architecture](#architecture)

## Setup

1. Create a Discord application and bot:
   - Go to the [Discord Developer Portal](https://discord.com/developers/applications)
   - Create a new application
   - Go to the "Bot" section and create a bot
   - Copy the bot token and client ID

2. Configure the bot:
   - Copy the `.env` file and rename it to `.env`
   - Fill in the following values:
     - `DISCORD_TOKEN`: Your Discord bot token
     - `DISCORD_CLIENT_ID`: Your Discord client ID
     - `N8N_WEBHOOK_URL`: Your n8n webhook URL

3. Install dependencies:
   ```bash
   npm install
   ```

4. Start the bot:
   ```bash
   node index.js
   ```

## Features

- Listens for messages in all channels the bot has access to
- Forwards messages to n8n webhook with detailed information including:
  - Message content and type
  - Author information
  - Channel information
  - Guild (server) information
  - Timestamp
  - Message ID
  - Original message object

## Security

- Uses environment variables for sensitive information
- Implements proper error handling
- Graceful shutdown on process termination
- Ignores messages from other bots

## Required Discord Bot Permissions

- Read Messages/View Channels
- Send Messages
- Read Message History

## n8n Webhook Format

The bot sends messages to n8n in the following format:

```json
{
  "content": {
    "text": "message content",
    "type": "content_type"
  },
  "author": {
    "id": "user id",
    "username": "username",
    "discriminator": "discriminator"
  },
  "channel": {
    "id": "channel id",
    "name": "channel name",
    "type": "channel type"
  },
  "guild": {
    "id": "guild id",
    "name": "guild name"
  },
  "message_id": "message id",
  "original_message": "full Discord message object",
  "timestamp": 1234567890
}
```

### Content Types

The bot classifies messages into the following content types:

- `text` - Regular text messages
- `sticker` - Messages containing stickers
- `image` - Messages with image attachments
- `video` - Messages with video attachments
- `audio` - Messages with audio attachments
- `file` - Messages with other file types
- `embed` - Messages containing embeds
- `poll` - Messages containing polls
- `reply` - Messages that are replies to other messages
- `bot_mention` - Messages that mention the bot
- `link` - Messages containing URLs
- `empty` - Messages with no content (may contain attachments or other elements)

## 🚂 Deployment

### Railway Deployment

This bot can be easily deployed to Railway with just a few clicks:

1. **Get Started with Railway**
   - Sign up for Railway using my referral code `jay` or [referral link](https://railway.com?referralCode=jay) to get $5 in free credits
   - This helps support the project and gives you free hosting credits

2. **Prepare your repository**
   - Fork this repository
   - Make sure your `.env` file is properly configured

3. **Deploy to Railway**
   - Go to [Railway](https://railway.com?referralCode=jay)
   - Click "New Project"
   - Select "Deploy from GitHub repo"
   - Choose your forked repository
   - Railway will automatically detect it's a Node.js project

4. **Configure Environment Variables**
   - In your Railway project dashboard, go to "Variables"
   - Add the following environment variables:
     ```
     DISCORD_TOKEN=your_discord_bot_token
     DISCORD_CLIENT_ID=your_discord_client_id
     N8N_WEBHOOK_URL=your_n8n_webhook_url
     ```

5. **Start the Deployment**
   - Railway will automatically build and deploy your bot
   - You can monitor the deployment in the "Deployments" tab
   - Check the logs to ensure everything is running correctly

6. **Verify the Deployment**
   - Once deployed, your bot should automatically connect to Discord
   - Test by sending a message in your Discord server
   - Check the Railway logs to confirm the bot is receiving and forwarding messages

### Railway Credits and Referral Program

- Get $5 in free credits when you sign up using our [referral link](https://railway.com?referralCode=jay)
- Referral code: `3cq6l2`
- Credits are applied once you pay your first bill or purchase credits
- This helps support the project and gives you free hosting for your bot

### Railway Configuration Tips

- **Scaling**: Railway automatically scales your bot based on demand
- **Monitoring**: Use Railway's built-in monitoring to track your bot's performance
- **Logs**: Access real-time logs in the Railway dashboard
- **Updates**: Railway automatically redeploys when you push changes to your repository

### Alternative Deployment Methods

If you prefer not to use Railway, you can also deploy this bot to:
- Heroku
- DigitalOcean
- AWS
- Any other Node.js hosting platform

The deployment process is similar - just make sure to:
1. Set up the environment variables
2. Install dependencies
3. Start the bot with `node index.js`

## 🏗️ Architecture

This bot follows a **modular architecture** with a strict **250-line file limit** for maintainability:

### 📁 Project Structure
```
├── index.js                    # Main application entry point (69 lines)
├── lib/                        # Core modules
│   ├── formatters.js           # Data formatting utilities (96 lines)
│   ├── n8n-service.js          # N8N communication service (38 lines)
│   ├── event-data.js           # Event data structure creation (108 lines)
│   ├── commands.js             # Command registration system (63 lines)
│   └── event-handlers/         # Event handling modules
│       ├── message-handler.js  # Message event processing (39 lines)
│       ├── reaction-handler.js # Reaction event processing (67 lines)
│       └── thread-handler.js   # Thread event management (131 lines)
├── commands/                   # Discord slash commands
│   └── scrape.js              # Web scraping command
├── scripts/                   # Development and monitoring tools
│   ├── file-size-monitor.js   # File size compliance monitoring
│   └── pre-commit-hook.sh     # Git pre-commit hook
└── .taskmaster/               # Project management and documentation
    ├── docs/                  # Technical documentation
    └── tasks/                 # Task definitions and tracking
```

### 🔧 File Size Monitoring
- **Automatic monitoring** of all files to enforce 250-line limit
- **NPM scripts** for easy compliance checking
- **Pre-commit hooks** to prevent oversized files
- **CI/CD integration** ready

```bash
# Check file sizes
npm run check-file-sizes

# Strict mode (exits with error on violations)
npm run check-file-sizes-strict
```

### 🎯 Design Principles
- **Single Responsibility**: Each module has one clear purpose
- **Modularity**: Easy to test, maintain, and extend
- **Separation of Concerns**: Clear boundaries between different functionality
- **250-Line Limit**: Enforced across all files for readability

## 🔑 Keywords

discord bot, n8n integration, discord automation, n8n webhook, discord triggers, workflow automation, discord message forwarder, n8n discord integration, discord bot development, n8n automation, discord webhook, n8n workflow triggers, discord message types, content detection, discord bot integration, n8n connector, discord automation bot, n8n discord bot, discord message forwarding, n8n webhook integration, railway deployment, deploy discord bot, railway hosting, node.js deployment